eval('var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\r\n};\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === "number") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\r\n};\r\ndefine("0dc18897-c8fb-4673-8c39-5f7879a84379/cables", ["require", "exports"], function (require, exports) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n    var CableBox = /** @class */ (function () {\r\n        function CableBox(channel, redCable, greenCable, blueCable) {\r\n            this.channel = channel;\r\n            this.redCable = true;\r\n            this.greenCable = true;\r\n            this.blueCable = true;\r\n            this.redCableCut = false;\r\n            this.greenCableCut = false;\r\n            this.blueCableCut = false;\r\n            this.doorOpen = false;\r\n            this.redCable = redCable;\r\n            this.greenCable = greenCable;\r\n            this.blueCable = blueCable;\r\n        }\r\n        CableBox = __decorate([\r\n            Component(\'org.decentraland.CableBox\'),\r\n            __metadata("design:paramtypes", [Object, Boolean, Boolean, Boolean])\r\n        ], CableBox);\r\n        return CableBox;\r\n    }());\r\n    exports.CableBox = CableBox;\r\n});\r\n/// <reference path="./types.d.ts" />\r\ndefine("0dc18897-c8fb-4673-8c39-5f7879a84379/node_modules/decentraland-builder-scripts/channel", ["require", "exports"], function (require, exports) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n    var REQUEST_VALUE = \'__request_value__\';\r\n    var REPLY_VALUE = \'__reply_value__\';\r\n    var POLL_INTERVAL = 5000;\r\n    function createChannel(id, host, bus) {\r\n        var handlers = {};\r\n        var requests = {};\r\n        var responses = {};\r\n        bus.on(host.name, function (action) {\r\n            var handler = handlers[action.actionId];\r\n            if (handler) {\r\n                handler(action);\r\n            }\r\n            // clear all pending requests for this entity\r\n            requests = {};\r\n        });\r\n        bus.on(REQUEST_VALUE, function (message) {\r\n            if (message.sender !== id && message.entityName === host.name) {\r\n                var key = message.key;\r\n                var response = responses[key];\r\n                if (response) {\r\n                    var value = response();\r\n                    var reply = {\r\n                        entityName: host.name,\r\n                        key: key,\r\n                        sender: id,\r\n                        value: value\r\n                    };\r\n                    bus.emit(REPLY_VALUE, reply);\r\n                }\r\n                // clear pending request for this key\r\n                delete requests[key];\r\n            }\r\n        });\r\n        bus.on(REPLY_VALUE, function (message) {\r\n            if (message.sender !== id && message.entityName === host.name) {\r\n                var key = message.key, value = message.value;\r\n                var request = requests[key];\r\n                if (request) {\r\n                    request(value);\r\n                }\r\n                // clear pending request for this key\r\n                delete requests[key];\r\n            }\r\n        });\r\n        return {\r\n            id: id,\r\n            bus: bus,\r\n            createAction: function (actionId, values) {\r\n                var action = {\r\n                    entityName: host.name,\r\n                    actionId: actionId,\r\n                    values: values\r\n                };\r\n                return action;\r\n            },\r\n            sendActions: function (actions) {\r\n                var e_1, _a;\r\n                if (actions === void 0) { actions = []; }\r\n                try {\r\n                    for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\r\n                        var base = actions_1_1.value;\r\n                        var action = __assign(__assign({}, base), { sender: id });\r\n                        bus.emit(action.entityName, action);\r\n                    }\r\n                }\r\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\r\n                    }\r\n                    finally { if (e_1) throw e_1.error; }\r\n                }\r\n            },\r\n            handleAction: function (actionId, handler) {\r\n                handlers[actionId] = handler;\r\n            },\r\n            request: function (key, callback) {\r\n                requests[key] = callback;\r\n                var request = { entityName: host.name, key: key, sender: id };\r\n                var interval = setInterval(function () {\r\n                    if (key in requests) {\r\n                        bus.emit(REQUEST_VALUE, request);\r\n                    }\r\n                    else {\r\n                        clearInterval(interval);\r\n                    }\r\n                }, POLL_INTERVAL);\r\n            },\r\n            reply: function (key, callback) {\r\n                responses[key] = callback;\r\n            }\r\n        };\r\n    }\r\n    exports.createChannel = createChannel;\r\n});\r\n/// <reference path="./types.d.ts" />\r\ndefine("0dc18897-c8fb-4673-8c39-5f7879a84379/node_modules/decentraland-builder-scripts/inventory", ["require", "exports"], function (require, exports) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n    function createInventory(UICanvas, UIContainerStack, UIImage) {\r\n        var canvas = null;\r\n        var container = null;\r\n        var images = {};\r\n        function getContainer() {\r\n            if (!canvas) {\r\n                canvas = new UICanvas();\r\n            }\r\n            if (!container) {\r\n                container = new UIContainerStack(canvas);\r\n                container.isPointerBlocker = false;\r\n                container.vAlign = \'bottom\';\r\n                container.hAlign = \'right\';\r\n                container.stackOrientation = 0;\r\n                container.spacing = 0;\r\n                container.positionY = 75;\r\n                container.positionX = -25;\r\n            }\r\n            return container;\r\n        }\r\n        return {\r\n            add: function (id, texture) {\r\n                var image = images[id] || new UIImage(getContainer(), texture);\r\n                image.width = 128;\r\n                image.height = 128;\r\n                image.sourceTop = 0;\r\n                image.sourceLeft = 0;\r\n                image.sourceHeight = 256;\r\n                image.sourceWidth = 256;\r\n                image.isPointerBlocker = false;\r\n                image.visible = true;\r\n                images[id] = image;\r\n            },\r\n            remove: function (id) {\r\n                var image = images[id];\r\n                if (image) {\r\n                    image.visible = false;\r\n                    image.height = 0;\r\n                    image.width = 0;\r\n                }\r\n            },\r\n            has: function (id) {\r\n                return id in images && images[id].visible;\r\n            }\r\n        };\r\n    }\r\n    exports.createInventory = createInventory;\r\n});\r\n/// <reference path="./types.d.ts" />\r\ndefine("0dc18897-c8fb-4673-8c39-5f7879a84379/node_modules/decentraland-builder-scripts/spawner", ["require", "exports", "node_modules/decentraland-builder-scripts/channel", "node_modules/decentraland-builder-scripts/inventory"], function (require, exports, channel_1, inventory_1) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n    var bus = new MessageBus();\r\n    var Spawner = /** @class */ (function () {\r\n        function Spawner(script) {\r\n            var inventory = inventory_1.createInventory(UICanvas, UIContainerStack, UIImage);\r\n            script.init({ inventory: inventory });\r\n            this.script = script;\r\n        }\r\n        Spawner.prototype.spawn = function (name, transform, props) {\r\n            if (transform === void 0) { transform = new Transform({ position: new Vector3(8, 0, 8) }); }\r\n            var host = new Entity(name);\r\n            host.addComponent(transform);\r\n            engine.addEntity(host);\r\n            var channel = channel_1.createChannel(\'channel-id\', host, bus);\r\n            this.script.spawn(host, props || {}, channel);\r\n        };\r\n        return Spawner;\r\n    }());\r\n    exports.Spawner = Spawner;\r\n});\r\ndefine("0dc18897-c8fb-4673-8c39-5f7879a84379/game", ["require", "exports"], function (require, exports) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n});\r\n//import Cables, { Props } from \'./item\'\r\n//\r\n//const cables = new Cables()\r\n//const spawner = new Spawner<Props>(cables)\r\n//\r\n//spawner.spawn(\r\n//  \'cables\',\r\n//  new Transform({\r\n//    position: new Vector3(4, 1.4, 8)\r\n//  }),\r\n//  {\r\n//    greenCable: true,\r\n//    blueCable: true,\r\n//    redCable: true,\r\n//    onClick: [{ entityName: \'cables\', actionId: \'toggleBox\', values: {} }],\r\n//    onRedCut: [{ entityName: \'cables\', actionId: \'closeBox\', values: {} }],\r\n//    onGreenCut: null,\r\n//    onBlueCut: null,\r\n//    onBoxOpen: null,\r\n//    onBoxClose: null\r\n//  }\r\n//)\r\n//\r\ndefine("0dc18897-c8fb-4673-8c39-5f7879a84379/item", ["require", "exports", \"0dc18897-c8fb-4673-8c39-5f7879a84379/cables\"], function (require, exports, cables_1) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n    var CableColors;\r\n    (function (CableColors) {\r\n        CableColors[CableColors["Blue"] = 0] = "Blue";\r\n        CableColors[CableColors["Green"] = 1] = "Green";\r\n        CableColors[CableColors["Red"] = 2] = "Red";\r\n    })(CableColors = exports.CableColors || (exports.CableColors = {}));\r\n    var Cables = /** @class */ (function () {\r\n        function Cables() {\r\n            this.openClip = new AudioClip(\'0dc18897-c8fb-4673-8c39-5f7879a84379/sounds/OpenChest.mp3\');\r\n            this.closeClip = new AudioClip(\'0dc18897-c8fb-4673-8c39-5f7879a84379/sounds/CloseChest.mp3\');\r\n            this.sparkSoundClip = new AudioClip(\'0dc18897-c8fb-4673-8c39-5f7879a84379/sounds/Sparks_FX_03.mp3\');\r\n        }\r\n        Cables.prototype.init = function () { };\r\n        Cables.prototype.toggleBox = function (entity, value, playSound) {\r\n            if (playSound === void 0) { playSound = true; }\r\n            var boxState = entity.getComponent(cables_1.CableBox);\r\n            if (boxState.doorOpen === value)\r\n                return;\r\n            if (playSound) {\r\n                var source = value\r\n                    ? new AudioSource(this.openClip)\r\n                    : new AudioSource(this.closeClip);\r\n                entity.addComponentOrReplace(source);\r\n                //source.volume = 0.3\r\n                source.playing = true;\r\n            }\r\n            var animator = entity.getComponent(Animator);\r\n            var openClip = new AnimationState(\'open\', { looping: false });\r\n            var closeClip = new AnimationState(\'close\', { looping: false });\r\n            animator.addClip(openClip);\r\n            animator.addClip(closeClip);\r\n            openClip.stop();\r\n            closeClip.stop();\r\n            var clip = value ? openClip : closeClip;\r\n            clip.play();\r\n            boxState.doorOpen = value;\r\n        };\r\n        Cables.prototype.toggleCable = function (entity, value, color, playSound) {\r\n            if (playSound === void 0) { playSound = true; }\r\n            var boxState = entity.getParent().getComponent(cables_1.CableBox);\r\n            if (playSound && value) {\r\n                var source = new AudioSource(this.sparkSoundClip);\r\n                entity.addComponentOrReplace(source);\r\n                source.playing = true;\r\n            }\r\n            var animator = entity.getComponent(Animator);\r\n            var cableClip;\r\n            switch (color) {\r\n                case CableColors.Red:\r\n                    if (boxState.redCableCut === value)\r\n                        return;\r\n                    cableClip = new AnimationState(\'CableRedAction\', { looping: false });\r\n                    animator.addClip(cableClip);\r\n                    boxState.redCableCut = value;\r\n                    break;\r\n                case CableColors.Green:\r\n                    if (boxState.greenCableCut === value)\r\n                        return;\r\n                    cableClip = new AnimationState(\'CableGreenAction\', { looping: false });\r\n                    animator.addClip(cableClip);\r\n                    boxState.greenCableCut = value;\r\n                    break;\r\n                case CableColors.Blue:\r\n                    if (boxState.blueCableCut === value)\r\n                        return;\r\n                    cableClip = new AnimationState(\'CableBlueAction\', { looping: false });\r\n                    animator.addClip(cableClip);\r\n                    boxState.blueCableCut = value;\r\n                    break;\r\n            }\r\n            if (value) {\r\n                cableClip.play();\r\n            }\r\n            else {\r\n                cableClip.stop();\r\n            }\r\n        };\r\n        Cables.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var box = new Entity();\r\n            box.setParent(host);\r\n            var boxState = new cables_1.CableBox(channel, props.redCable, props.greenCable, props.blueCable);\r\n            box.addComponent(boxState);\r\n            var animator = new Animator();\r\n            var openClip = new AnimationState(\'open\', { looping: false });\r\n            var closeClip = new AnimationState(\'close\', { looping: false });\r\n            animator.addClip(openClip);\r\n            animator.addClip(closeClip);\r\n            box.addComponent(animator);\r\n            box.addComponent(new GLTFShape(\'0dc18897-c8fb-4673-8c39-5f7879a84379/models/Cable_Box.glb\'));\r\n            box.addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0)\r\n            }));\r\n            box.addComponent(new OnPointerDown(function (e) {\r\n                channel.sendActions(props.onClick);\r\n            }, {\r\n                button: ActionButton.POINTER,\r\n                hoverText: \'Open/Close\',\r\n                distance: 4\r\n            }));\r\n            var redCable = new Entity();\r\n            redCable.setParent(box);\r\n            if (props.redCable) {\r\n                redCable.addComponent(new Transform({\r\n                    position: new Vector3(-0.21, 0.15, -0.25)\r\n                }));\r\n                var redClip = new AnimationState(\'CableRedAction\', { looping: false });\r\n                redCable.addComponent(new Animator()).addClip(redClip);\r\n                redCable.addComponent(new GLTFShape(\'0dc18897-c8fb-4673-8c39-5f7879a84379/models/RedCable.glb\'));\r\n                redCable.addComponent(new OnPointerDown(function (e) {\r\n                    if (boxState.redCableCut === true)\r\n                        return;\r\n                    var action = channel.createAction(\'redCut\', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: \'Cut\',\r\n                    distance: 4\r\n                }));\r\n            }\r\n            var greenCable = new Entity();\r\n            greenCable.setParent(box);\r\n            if (props.greenCable) {\r\n                greenCable.addComponent(new Transform({\r\n                    position: new Vector3(0, 0.15, -0.25)\r\n                }));\r\n                var greenClip = new AnimationState(\'CableGreenAction\', {\r\n                    looping: false\r\n                });\r\n                greenCable.addComponent(new Animator()).addClip(greenClip);\r\n                greenCable.addComponent(new GLTFShape(\'0dc18897-c8fb-4673-8c39-5f7879a84379/models/GreenCable.glb\'));\r\n                greenCable.addComponent(new OnPointerDown(function (e) {\r\n                    if (boxState.greenCableCut === true)\r\n                        return;\r\n                    var action = channel.createAction(\'greenCut\', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: \'Cut\',\r\n                    distance: 4\r\n                }));\r\n            }\r\n            var blueCable = new Entity();\r\n            blueCable.setParent(box);\r\n            if (props.blueCable) {\r\n                blueCable.addComponent(new Transform({\r\n                    position: new Vector3(0.21, 0.15, -0.25)\r\n                }));\r\n                var blueClip = new AnimationState(\'CableBlueAction\', { looping: false });\r\n                blueCable.addComponent(new Animator()).addClip(blueClip);\r\n                blueCable.addComponent(new GLTFShape(\'0dc18897-c8fb-4673-8c39-5f7879a84379/models/BlueCable.glb\'));\r\n                blueCable.addComponent(new OnPointerDown(function (e) {\r\n                    if (boxState.blueCableCut === true)\r\n                        return;\r\n                    var action = channel.createAction(\'blueCut\', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: \'Cut\',\r\n                    distance: 4\r\n                }));\r\n            }\r\n            // background surface (to avoid closing the door when missing cables)\r\n            // let backroundMaterial = new Material()\r\n            // backroundMaterial.albedoColor = Color3.FromHexString("#1C1C1C")\r\n            // backroundMaterial.metallic = 0\r\n            // let background = new Entity()\r\n            // background.addComponent(new PlaneShape())\r\n            // background.setParent(host)\r\n            // background.addComponent(new Transform({\r\n            // \tposition: new Vector3(0,0,0.01),\r\n            // \trotation: Quaternion.Euler(0,0,0),\r\n            // \tscale: new Vector3(0.35, 0.4, 0.35)\r\n            // }))\r\n            // background.addComponent(backroundMaterial)\r\n            // handle actions\r\n            channel.handleAction(\'openBox\', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggleBox(box, true);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onBoxOpen);\r\n                }\r\n            });\r\n            channel.handleAction(\'closeBox\', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggleBox(box, false);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onBoxClose);\r\n                }\r\n            });\r\n            channel.handleAction(\'toggleBox\', function (_a) {\r\n                var sender = _a.sender;\r\n                var newState = !boxState.doorOpen;\r\n                _this.toggleBox(box, newState);\r\n                if (sender === channel.id) {\r\n                    if (newState) {\r\n                        channel.sendActions(props.onBoxOpen);\r\n                    }\r\n                    else {\r\n                        channel.sendActions(props.onBoxClose);\r\n                    }\r\n                }\r\n            });\r\n            channel.handleAction(\'redCut\', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggleCable(redCable, true, CableColors.Red);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onRedCut);\r\n                }\r\n            });\r\n            channel.handleAction(\'greenCut\', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggleCable(greenCable, true, CableColors.Green);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onGreenCut);\r\n                }\r\n            });\r\n            channel.handleAction(\'blueCut\', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggleCable(blueCable, true, CableColors.Blue);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onBlueCut);\r\n                }\r\n            });\r\n            channel.handleAction(\'reset\', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggleCable(redCable, false, CableColors.Red);\r\n                _this.toggleCable(blueCable, false, CableColors.Blue);\r\n                _this.toggleCable(greenCable, false, CableColors.Green);\r\n                _this.toggleBox(box, false);\r\n            });\r\n            // sync initial values\r\n            channel.request(\'isActive\', function (state) {\r\n                _this.toggleBox(box, state[0], false);\r\n                _this.toggleCable(redCable, state[1], CableColors.Red);\r\n                _this.toggleCable(greenCable, state[2], CableColors.Green);\r\n                _this.toggleCable(blueCable, state[3], CableColors.Blue);\r\n            });\r\n            channel.reply(\'isActive\', function () { return [\r\n                boxState.doorOpen,\r\n                boxState.redCableCut,\r\n                boxState.greenCableCut,\r\n                boxState.blueCableCut\r\n            ]; });\r\n        };\r\n        return Cables;\r\n    }());\r\n    exports.default = Cables;\r\n});\r\n');