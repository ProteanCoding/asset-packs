eval('var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === "number") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\r\n};\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\ndefine("0d3f124a-901f-4895-a045-a4c80c05ea26/chest", ["require", "exports"], function (require, exports) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n    var OpenableChest = /** @class */ (function () {\r\n        function OpenableChest(channel, onOpen, onClose) {\r\n            this.channel = channel;\r\n            this.onOpen = onOpen;\r\n            this.onClose = onClose;\r\n            this.transition = -1;\r\n            this.isOpen = false;\r\n        }\r\n        OpenableChest = __decorate([\r\n            Component(\'org.decentraland.OpenableChest\'),\r\n            __metadata("design:paramtypes", [Object, Array, Array])\r\n        ], OpenableChest);\r\n        return OpenableChest;\r\n    }());\r\n    exports.OpenableChest = OpenableChest;\r\n    var openChest = Quaternion.Euler(-90, 0, 0);\r\n    var closedChest = Quaternion.Euler(0, 0, 0);\r\n    var ChestSystem = /** @class */ (function () {\r\n        function ChestSystem() {\r\n            this.group = engine.getComponentGroup(OpenableChest);\r\n        }\r\n        ChestSystem.prototype.update = function (dt) {\r\n            var e_1, _a;\r\n            try {\r\n                for (var _b = __values(this.group.entities), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var entity = _c.value;\r\n                    var openable = entity.getComponent(OpenableChest);\r\n                    var transform = entity.getComponent(Transform);\r\n                    var start = openable.isOpen ? closedChest : openChest;\r\n                    var end = openable.isOpen ? openChest : closedChest;\r\n                    var speed = openable.isOpen ? 1.5 : 3;\r\n                    if (openable.transition >= 0 && openable.transition < 1) {\r\n                        openable.transition += dt * speed;\r\n                        transform.rotation.copyFrom(Quaternion.Slerp(start, end, openable.transition));\r\n                    }\r\n                    else if (openable.transition > 1) {\r\n                        openable.transition = -1;\r\n                        transform.rotation.copyFrom(end);\r\n                        // send actions\r\n                        if (openable.isOpen && openable.onOpen) {\r\n                            openable.channel.sendActions(openable.onOpen);\r\n                        }\r\n                        else if (!openable.isOpen && openable.onClose) {\r\n                            openable.channel.sendActions(openable.onClose);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n        };\r\n        return ChestSystem;\r\n    }());\r\n    exports.ChestSystem = ChestSystem;\r\n});\r\n/// <reference path="./types.d.ts" />\r\ndefine("0d3f124a-901f-4895-a045-a4c80c05ea26/node_modules/decentraland-builder-scripts/channel", ["require", "exports"], function (require, exports) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n    var REQUEST_VALUE = \'__request_value__\';\r\n    var REPLY_VALUE = \'__reply_value__\';\r\n    var POLL_INTERVAL = 5000;\r\n    function createChannel(id, host, bus) {\r\n        var handlers = {};\r\n        var requests = {};\r\n        var responses = {};\r\n        bus.on(host.name, function (action) {\r\n            var handler = handlers[action.actionId];\r\n            if (handler) {\r\n                handler(action);\r\n            }\r\n            // clear all pending requests for this entity\r\n            requests = {};\r\n        });\r\n        bus.on(REQUEST_VALUE, function (message) {\r\n            if (message.sender !== id && message.entityName === host.name) {\r\n                var key = message.key;\r\n                var response = responses[key];\r\n                if (response) {\r\n                    var value = response();\r\n                    var reply = {\r\n                        entityName: host.name,\r\n                        key: key,\r\n                        sender: id,\r\n                        value: value\r\n                    };\r\n                    bus.emit(REPLY_VALUE, reply);\r\n                }\r\n                // clear pending request for this key\r\n                delete requests[key];\r\n            }\r\n        });\r\n        bus.on(REPLY_VALUE, function (message) {\r\n            if (message.sender !== id && message.entityName === host.name) {\r\n                var key = message.key, value = message.value;\r\n                var request = requests[key];\r\n                if (request) {\r\n                    request(value);\r\n                }\r\n                // clear pending request for this key\r\n                delete requests[key];\r\n            }\r\n        });\r\n        return {\r\n            id: id,\r\n            bus: bus,\r\n            sendActions: function (actions) {\r\n                var e_2, _a;\r\n                if (actions === void 0) { actions = []; }\r\n                try {\r\n                    for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\r\n                        var base = actions_1_1.value;\r\n                        var action = __assign(__assign({}, base), { sender: id });\r\n                        bus.emit(action.entityName, action);\r\n                    }\r\n                }\r\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\r\n                    }\r\n                    finally { if (e_2) throw e_2.error; }\r\n                }\r\n            },\r\n            handleAction: function (actionId, handler) {\r\n                handlers[actionId] = handler;\r\n            },\r\n            request: function (key, callback) {\r\n                requests[key] = callback;\r\n                var request = { entityName: host.name, key: key, sender: id };\r\n                var interval = setInterval(function () {\r\n                    if (key in requests) {\r\n                        bus.emit(REQUEST_VALUE, request);\r\n                    }\r\n                    else {\r\n                        clearInterval(interval);\r\n                    }\r\n                }, POLL_INTERVAL);\r\n            },\r\n            reply: function (key, callback) {\r\n                responses[key] = callback;\r\n            }\r\n        };\r\n    }\r\n    exports.createChannel = createChannel;\r\n});\r\n/// <reference path="./types.d.ts" />\r\ndefine("0d3f124a-901f-4895-a045-a4c80c05ea26/node_modules/decentraland-builder-scripts/spawner", ["require", "exports", "node_modules/decentraland-builder-scripts/channel"], function (require, exports, channel_1) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n    var bus = new MessageBus();\r\n    var Spawner = /** @class */ (function () {\r\n        function Spawner(script) {\r\n            script.init();\r\n            this.script = script;\r\n        }\r\n        Spawner.prototype.spawn = function (name, transform, props) {\r\n            if (transform === void 0) { transform = new Transform({ position: new Vector3(8, 0, 8) }); }\r\n            var host = new Entity(name);\r\n            host.addComponent(transform);\r\n            engine.addEntity(host);\r\n            var channel = channel_1.createChannel(\'channel-id\', host, bus);\r\n            this.script.spawn(host, props || {}, channel);\r\n        };\r\n        return Spawner;\r\n    }());\r\n    exports.Spawner = Spawner;\r\n});\r\ndefine("0d3f124a-901f-4895-a045-a4c80c05ea26/game", ["require", "exports"], function (require, exports) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n});\r\n//import Chest, { Props } from \'./item\'\r\n//\r\n//const chest = new Chest()\r\n//const spawner = new Spawner<Props>(chest)\r\n//\r\n//spawner.spawn(\'chest\', new Transform({ position: new Vector3(4, 0, 8) }), {\r\n//  onClick: [{ entityName: \'chest\', actionId: \'toggle\', values: {} }]\r\n//})\r\n//\r\ndefine("0d3f124a-901f-4895-a045-a4c80c05ea26/item", ["require", "exports", \"0d3f124a-901f-4895-a045-a4c80c05ea26/chest\"], function (require, exports, chest_1) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n    var offsetX = 0.4;\r\n    var offsetY = -0.15;\r\n    var Chest = /** @class */ (function () {\r\n        function Chest() {\r\n            this.openClip = new AudioClip(\'0d3f124a-901f-4895-a045-a4c80c05ea26/sounds/openChest.mp3\');\r\n            this.closeClip = new AudioClip(\'0d3f124a-901f-4895-a045-a4c80c05ea26/sounds/closeChest.mp3\');\r\n        }\r\n        Chest.prototype.init = function () {\r\n            engine.addSystem(new chest_1.ChestSystem());\r\n        };\r\n        Chest.prototype.toggle = function (entity, value, playSound) {\r\n            if (playSound === void 0) { playSound = true; }\r\n            var openable = entity.getComponent(chest_1.OpenableChest);\r\n            // compute new value\r\n            if (value === true) {\r\n                if (openable.isOpen)\r\n                    return;\r\n                openable.isOpen = true;\r\n            }\r\n            else if (value === false) {\r\n                if (!openable.isOpen)\r\n                    return;\r\n                openable.isOpen = false;\r\n            }\r\n            else {\r\n                openable.isOpen = !openable.isOpen;\r\n            }\r\n            // Play sound\r\n            if (playSound) {\r\n                var clip = openable.isOpen ? this.openClip : this.closeClip;\r\n                var source = new AudioSource(clip);\r\n                entity.addComponentOrReplace(source);\r\n                source.playing = true;\r\n            }\r\n            // start transition\r\n            if (openable.transition === -1) {\r\n                openable.transition = 0;\r\n            }\r\n            else {\r\n                openable.transition = 1 - openable.transition;\r\n            }\r\n        };\r\n        Chest.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var pivot = new Entity(\'pivot\');\r\n            pivot.setParent(host);\r\n            pivot.addComponent(new Transform({ position: new Vector3(0, -offsetY, -offsetX) }));\r\n            pivot.addComponent(new chest_1.OpenableChest(channel, props.onOpen, props.onClose));\r\n            var base = new Entity(\'base\');\r\n            base.setParent(host);\r\n            base.addComponent(new Transform({ position: new Vector3(0, 0, 0) }));\r\n            base.addComponent(new GLTFShape(\'0d3f124a-901f-4895-a045-a4c80c05ea26/models/Chest_Base_01/Chest_Base_01.glb\'));\r\n            var top = new Entity(\'base\');\r\n            top.setParent(pivot);\r\n            top.addComponent(new Transform({ position: new Vector3(0, offsetY, offsetX) }));\r\n            top.addComponent(new GLTFShape(\'0d3f124a-901f-4895-a045-a4c80c05ea26/models/Chest_Top_01/Chest_Top_01.glb\'));\r\n            // handle click\r\n            top.addComponent(new OnPointerDown(function () { return channel.sendActions(props.onClick); }));\r\n            // handle actions\r\n            channel.handleAction(\'open\', function () { return _this.toggle(pivot, true); });\r\n            channel.handleAction(\'close\', function () { return _this.toggle(pivot, false); });\r\n            channel.handleAction(\'toggle\', function () { return _this.toggle(pivot); });\r\n            // sync initial values\r\n            channel.request(\'isOpen\', function (isOpen) {\r\n                return _this.toggle(pivot, isOpen, false);\r\n            });\r\n            channel.reply(\'isOpen\', function () { return pivot.getComponent(chest_1.OpenableChest).isOpen; });\r\n        };\r\n        return Chest;\r\n    }());\r\n    exports.default = Chest;\r\n});\r\n');