eval("var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\n//import { Spawner } from '../node_modules/decentraland-builder-scripts/spawner'\r\n//import Platform, { Props } from './item'\r\n//\r\n//const platform = new Platform()\r\n//const spawner = new Spawner<Props>(platform)\r\n//\r\n//spawner.spawn('platform', new Transform({ position: new Vector3(8, 0, 8) }), {\r\n//  distance: 4,\r\n//  speed: 5,\r\n//  onReachStart: [{ entityName: 'platform', actionId: 'goToEnd', values: {} }],\r\n//  onReachEnd: [{ entityName: 'platform', actionId: 'goToStart', values: {} }]\r\n//})\r\n//\r\ndefine(\"d64291e9-d4a0-4375-9fc3-7f220734b8f1/platform\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.HorizontalPlatformSystem = exports.HorizontalPlatform = void 0;\r\n    var HorizontalPlatform = /** @class */ (function () {\r\n        function HorizontalPlatform(channel, distance, speed, onReachStart, onReachEnd) {\r\n            if (distance === void 0) { distance = 10; }\r\n            if (speed === void 0) { speed = 5; }\r\n            this.channel = channel;\r\n            this.distance = distance;\r\n            this.speed = speed;\r\n            this.onReachStart = onReachStart;\r\n            this.onReachEnd = onReachEnd;\r\n            this.transition = -1;\r\n            this.delay = -1; // this is a delay to stop the animation, to prevent a flickr in the transition\r\n            this.position = 'start';\r\n        }\r\n        HorizontalPlatform = __decorate([\r\n            Component('org.decentraland.SpaceshipHorizontalPlatform')\r\n        ], HorizontalPlatform);\r\n        return HorizontalPlatform;\r\n    }());\r\n    exports.HorizontalPlatform = HorizontalPlatform;\r\n    var startPosition = new Vector3(0, 0, 0);\r\n    var HorizontalPlatformSystem = /** @class */ (function () {\r\n        function HorizontalPlatformSystem() {\r\n            this.group = engine.getComponentGroup(HorizontalPlatform);\r\n        }\r\n        HorizontalPlatformSystem.prototype.update = function (dt) {\r\n            var e_1, _a;\r\n            try {\r\n                for (var _b = __values(this.group.entities), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var entity = _c.value;\r\n                    var platform = entity.getComponent(HorizontalPlatform);\r\n                    var transform = entity.getComponent(Transform);\r\n                    var endPosition = new Vector3(0, 0, -platform.distance);\r\n                    var isStart = platform.position === 'start';\r\n                    var start = !isStart ? startPosition : endPosition;\r\n                    var end = !isStart ? endPosition : startPosition;\r\n                    var speed = platform.speed / 20;\r\n                    if (platform.transition >= 0 && platform.transition < 1) {\r\n                        platform.transition += dt * speed;\r\n                        transform.position.copyFrom(Vector3.Lerp(start, end, platform.transition));\r\n                    }\r\n                    else if (platform.transition >= 1) {\r\n                        platform.transition = -1;\r\n                        platform.delay = 0;\r\n                        transform.position.copyFrom(end);\r\n                        // send actions\r\n                        if (!isStart && platform.onReachEnd) {\r\n                            platform.channel.sendActions(platform.onReachEnd);\r\n                        }\r\n                        else if (isStart && platform.onReachStart) {\r\n                            platform.channel.sendActions(platform.onReachStart);\r\n                        }\r\n                    }\r\n                    else if (platform.delay >= 0 && platform.delay < 1) {\r\n                        platform.delay += dt;\r\n                    }\r\n                    else if (platform.delay >= 1) {\r\n                        platform.delay = -1;\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n        };\r\n        return HorizontalPlatformSystem;\r\n    }());\r\n    exports.HorizontalPlatformSystem = HorizontalPlatformSystem;\r\n});\r\ndefine(\"d64291e9-d4a0-4375-9fc3-7f220734b8f1/item\", [\"require\", \"exports\", \"d64291e9-d4a0-4375-9fc3-7f220734b8f1/platform\"], function (require, exports, platform_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Door = /** @class */ (function () {\r\n        function Door() {\r\n        }\r\n        Door.prototype.init = function () {\r\n            engine.addSystem(new platform_1.HorizontalPlatformSystem());\r\n        };\r\n        Door.prototype.move = function (entity, newPosition, useTransition) {\r\n            if (useTransition === void 0) { useTransition = true; }\r\n            var platform = entity.getComponent(platform_1.HorizontalPlatform);\r\n            var isStart = platform.position === 'start';\r\n            // compute new value\r\n            if (newPosition === 'end') {\r\n                if (!isStart)\r\n                    return;\r\n                platform.position = 'end';\r\n            }\r\n            else if (newPosition === 'start') {\r\n                if (isStart)\r\n                    return;\r\n                platform.position = 'start';\r\n            }\r\n            // start transition\r\n            if (useTransition) {\r\n                if (platform.transition === -1) {\r\n                    platform.transition = 0;\r\n                }\r\n                else {\r\n                    platform.transition = 1 - platform.transition;\r\n                }\r\n            }\r\n            else {\r\n                platform.transition = 1;\r\n            }\r\n        };\r\n        Door.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var distance = props.distance, speed = props.speed, autoStart = props.autoStart, onReachStart = props.onReachStart, onReachEnd = props.onReachEnd;\r\n            var platform = new Entity(host.name + '-platform');\r\n            platform.setParent(host);\r\n            platform.addComponent(new Transform({ position: new Vector3(0, 0, 0) }));\r\n            platform.addComponent(new GLTFShape('d64291e9-d4a0-4375-9fc3-7f220734b8f1/models/Spaceship_Orange.glb'));\r\n            platform.addComponent(new platform_1.HorizontalPlatform(channel, distance, speed, onReachStart, onReachEnd));\r\n            // handle actions\r\n            channel.handleAction('goToEnd', function () { return _this.move(platform, 'end'); });\r\n            channel.handleAction('goToStart', function () { return _this.move(platform, 'start'); });\r\n            // sync initial values\r\n            channel.request('position', function (position) {\r\n                return _this.move(platform, position, false);\r\n            });\r\n            channel.reply('position', function () { return platform.getComponent(platform_1.HorizontalPlatform).position; });\r\n            // auto start platform\r\n            if (autoStart !== false) {\r\n                var goToEndAction = {\r\n                    entityName: host.name,\r\n                    actionId: 'goToEnd',\r\n                    values: {}\r\n                };\r\n                channel.sendActions([goToEndAction]);\r\n            }\r\n        };\r\n        return Door;\r\n    }());\r\n    exports.default = Door;\r\n});\r\n")